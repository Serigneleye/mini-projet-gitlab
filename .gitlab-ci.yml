stages:
  - Lint
  - Compile
  - Security_scan
  - Test
  - Quality
  - Package
  - Review
  - Staging
  - Production
  - Deployment_validation

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task


flake8:
  image: docker:latest
  stage: Lint
  
  services:
    - docker:dind
  script:
    - apk add --no-cache python3 py3-pip
    - python3 -m venv /path/to/venv
    - . /path/to/venv/bin/activate
    - pip install --upgrade pip setuptools importlib_metadata
    - pip install flake8
    - flake8 --ignore=E501,E303 .

docker_linter:
  image: docker:latest
  stage: Lint
  services:
    - docker:dind
  script:
    - apk add --no-cache wget
    - wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
    - chmod +x /usr/local/bin/hadolint
    - hadolint Dockerfile

compile:
  image: docker:latest
  stage: Compile
  services:
    - docker:dind
  script:
    - docker build -t gitlabprojet .
    - docker save gitlabprojet > gitlabprojet.tar
  artifacts:
    paths:
      - gitlabprojet.tar

trivy_scan:
  stage: Security_scan
  image: docker:latest
  services:
    - docker:dind
  script:
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
    - docker load < gitlabprojet.tar
    - ./trivy image --severity HIGH,CRITICAL --exit-code 1 --no-progress gitlabprojet
 
test:
  stage: Test
  image: docker:latest
  services:
    - docker:dind
  script:
    # Exécuter le fichier test.py à l'intérieur de l'image
    - docker load < gitlabprojet.tar
    - docker run -d -p 80:5000 --env PORT=5000 --name gitlabprojet gitlabprojet python test.py

sonarcloud-check:
  stage: Quality
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
